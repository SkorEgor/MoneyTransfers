// ------------------------------------------------------------- Описание/объявление класса ORDER ------------------------------------------------------------- //
class ORDER															//Класс: ORDER (имя класса пишеться заглавными буквами)
{
private:															//Описание скрытых элементов класса:
	int payer_current_account;											//Расчетный счет плательщика;
	int beneficiary_current_account;									//Расчетный счет получателя;
	int summ;															//Перечисляемая сумма в рублях.
public:																//Описание доступных элементов класса:
	ORDER();															//Конструктор по умолчанию (совпадает с именем класса, вызывается без параметров, вызываеться автоматически при создании объекта класса);
	ORDER(int, int, int);												//Конструктор с параметрами для заполнения скрытых полей класса;
	ORDER(ORDER&);														//Конструктор копирования (получает в качестве 1 параметра, указатель на объект этого же класса). Вызываеться в тех случая, когда новый объект создаеться путем копирования существующего;
	//void print();														//Функция/Метод вывода на экран значений полей/свойства класса.
	ORDER& operator= (const ORDER&);									//Перегрузка/переопределение операции ПРИСВАИВАНИЯ;
	bool operator< (ORDER&);											//Перегрузка/переопределение операции СРАВНЕНИЯ (1) МЕНЬШЕ (2);
	bool operator== (int);											//Перегрузка/переопределение операции СРАВНЕНИЯ (1) РАВЕН  (2);
	friend std::ostream& operator<< (std::ostream&, const ORDER&);		//Перегрузка/переопределение операции вывода, делая функцию вывода <<, дружественной функцией класса ORDER, для доступа к скрытым полям;
};
// ---------------------------------------------------------- Конец описание/объявление класса ORDER ---------------------------------------------------------- //





















// --------------------------------------------- Справка -------------------------------------------- //
/*/можно создавать несколько секций привата и доступа

поля класса могут:
-иметь любой тип, кроме типа этого же класса
-описанны с модификатором const-инициализируються один раз и не могут изменяться 
-быть описанны с модификатором static, но не как auto,extern, register

Инициализация полей при описании не допускается

Методы класса — это его функции.
Свойства класса — его переменные.

Если тело метода внутри класса, то он является встроенным

Переменные типа "Класс", назыветься экземплярами или объектами класса

При выходе объекта из области действия он уничтожаеться, при этом автоматически вызывается деструктор

Конструктор НЕ ВОЗРАЩАЕТ ЗНАЧЕНИЕ, даже типа void. Нельзя получить указательн на конструктор

Класс может иметь несколько конструкторов с разными параметрами для разных видов инициализации

Параметры конструктора могут иметь любой тип, кроме этого же класса. Можно задавать значения параметров по умолчанию. 
Их  может содержать один из конструкторов.

Конструкторы не наследуюся

Конструкторы нельзя опсисать с модификаторами const, virtual, static
*/